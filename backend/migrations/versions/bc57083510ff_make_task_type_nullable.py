"""Make task_type nullable

Revision ID: bc57083510ff
Revises: bdf5d7827c18
Create Date: 2025-06-01 01:54:05.675403

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bc57083510ff'
down_revision: Union[str, None] = 'bdf5d7827c18'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_ml_models_id', table_name='ml_models')
    op.drop_table('ml_models')
    op.drop_index('ix_vector_embeddings_id', table_name='vector_embeddings')
    op.drop_table('vector_embeddings')
    
    # Create the enum type first
    op.execute("CREATE TYPE tasktype AS ENUM ('DEVELOPMENT', 'DESIGN', 'TESTING', 'DOCUMENTATION', 'RESEARCH', 'PLANNING', 'REVIEW', 'BUG_FIX', 'MAINTENANCE', 'OTHER')")
    
    # Then add the column using the enum type
    op.add_column('tasks', sa.Column('task_type', sa.Enum('DEVELOPMENT', 'DESIGN', 'TESTING', 'DOCUMENTATION', 'RESEARCH', 'PLANNING', 'REVIEW', 'BUG_FIX', 'MAINTENANCE', 'OTHER', name='tasktype'), nullable=True))
    
    op.alter_column('users', 'bio',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'bio',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_column('tasks', 'task_type')
    op.create_table('vector_embeddings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('embedding', postgresql.ARRAY(sa.DOUBLE_PRECISION(precision=53)), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='vector_embeddings_pkey')
    )
    op.create_index('ix_vector_embeddings_id', 'vector_embeddings', ['id'], unique=False)
    op.create_table('ml_models',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('model_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('performance_metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('hyperparameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('feature_importance', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('last_trained', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='ml_models_pkey')
    )
    op.create_index('ix_ml_models_id', 'ml_models', ['id'], unique=False)
    # ### end Alembic commands ###
